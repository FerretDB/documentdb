---
name: Packages
on:
  pull_request:
    types:
      - unlabeled # if GitHub Actions stuck, add and remove "not ready" label to force rebuild
      - opened
      - reopened
      - synchronize
  push:
    branches:
      - ferretdb
    tags:
      - "*"
  schedule:
    - cron: "10 8 * * 1"

env:
  GOPATH: /home/runner/go
  GOCACHE: /home/runner/go/cache
  GOLANGCI_LINT_CACHE: /home/runner/go/cache/lint
  GOMODCACHE: /home/runner/go/mod
  GOPROXY: https://proxy.golang.org
  GOTOOLCHAIN: local

# Do not run this workflow in parallel for any PR change or branch/tag push
# to save some resources.
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref_name }}
  cancel-in-progress: false

jobs:
  deb:
    name: Build .debs (${{ matrix.os }}, Pg${{ matrix.pg }})
    runs-on: ubuntu-24.04
    timeout-minutes: 40

    if: >
      github.event_name != 'pull_request' ||
      (
        !contains(github.event.pull_request.labels.*.name, 'not ready') &&
        contains(github.event.pull_request.labels.*.name, 'packages')
      )

    strategy:
      fail-fast: false
      matrix:
        os: [deb11, deb12, ubuntu22.04, ubuntu24.04]
        pg: [15, 16, 17]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main

      - name: Define Debian package version
        id: version
        run: |
          cd ferretdb_packaging
          go mod tidy
          go mod verify
          go run ./defineversion --command deb-version --control-file ../pg_documentdb_core/documentdb_core.control

      - name: Build ${{ steps.version.outputs.version }}
        if: steps.version.outputs.version != ''
        run: ./ferretdb_packaging/build_packages.sh --os ${{ matrix.os }} --pg ${{ matrix.pg }} --version ${{ steps.version.outputs.version }} --test-clean-install

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{ matrix.pg }}-${{ steps.version.outputs.version }}
          path: packaging/*.deb
          retention-days: 1
          if-no-files-found: error
          compression-level: 0
          overwrite: false

      - name: Check dirty
        run: |
          git status
          git diff --exit-code

  docker:
    name: Build docker (Pg ${{ matrix.pg }})
    runs-on: ubuntu-24.04
    timeout-minutes: 40

    if: >
      github.event_name != 'pull_request' ||
      (
        !contains(github.event.pull_request.labels.*.name, 'not ready') &&
        contains(github.event.pull_request.labels.*.name, 'packages')
      )

    strategy:
      fail-fast: false
      matrix:
        pg: [15, 16, 17]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: FerretDB/github-actions/setup-go@main

      - name: Define Docker tags
        id: tag
        run: |
          cd ferretdb_packaging
          go mod tidy
          go mod verify
          go run ./defineversion --command docker-tags
        env:
          INPUT_PG_VERSION: ${{ matrix.pg }}

      - name: Debian package version
        id: version
        run: |
          cd ferretdb_packaging
          go mod tidy
          go mod verify
          go run ./defineversion --command deb-version --control-file ../pg_documentdb_core/documentdb_core.control

      - name: Build Debian package ${{ steps.version.outputs.version }} to use for docker build
        if: steps.version.outputs.version != ''
        run: ./ferretdb_packaging/build_packages.sh --os deb12 --pg ${{ matrix.pg }} --version ${{ steps.version.outputs.version }}

      - name: Initialize Docker Buildx builder
        run: make -C ferretdb_packaging docker-init

      # mostly to check that this command still works
      - name: Build local Docker image
        if: steps.version.outputs.version != ''
        run: make -C ferretdb_packaging docker-documentdb FILE=development POSTGRES_VERSION=${{ matrix.pg }} DOCUMENTDB_VERSION=${{ steps.version.outputs.version }}

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ferretdbbot
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Quay.io
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ferretdbbot
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Build and push development Docker images ${{ steps.tag.outputs.development_images }}
        if: steps.tag.outputs.development_images != '' && steps.version.outputs.version != ''
        run: make -C docker-documentdb-development-push POSTGRES_VERSION=${{ matrix.pg }} DOCUMENTDB_VERSION=${{ steps.version.outputs.version }} TAGS=${{ steps.tag.outputs.development_images }}

      - name: Build and push production Docker images ${{ steps.tag.outputs.production_images }}
        if: steps.tag.outputs.production_images != '' && steps.version.outputs.version != ''
        run: make -C docker-documentdb-production-push POSTGRES_VERSION=${{ matrix.pg }} DOCUMENTDB_VERSION=${{ steps.version.outputs.version }} TAGS=${{ steps.tag.outputs.production_images }}

      - name: Check dirty
        run: |
          git status
          git diff --exit-code
